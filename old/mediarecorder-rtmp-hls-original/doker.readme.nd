# 🐳 Dockerized RTMP + HLS Streaming Setup

This guide sets up a production-ready **Node.js + FFmpeg + NGINX (with RTMP module)** streaming environment using Docker.

---

## 📦 Services Included

- **node**: Your custom MediaRecorder + WebSocket streaming server
- **nginx**: Pre-configured with RTMP + HLS support
- **Volumes**: Shared volume to store HLS segments at `/tmp/hls`

---

## 🗂 Directory Structure

```
project-root/
├── docker-compose.yml
├── nginx/
│   └── nginx.conf
├── node/
│   ├── server.js
│   ├── package.json
│   └── public/
│       └── index.html
```

---

## 📄 docker-compose.yml

```yaml
version: '3.8'

services:
  node:
    build: ./node
    ports:
      - "4000:4000"
    volumes:
      - ./hls:/tmp/hls
    depends_on:
      - nginx

  nginx:
    image: alfg/nginx-rtmp
    ports:
      - "1935:1935"   # RTMP ingest
      - "8080:80"     # HLS playback
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./hls:/tmp/hls
```

---

## 📄 nginx/nginx.conf

```nginx
events {}

rtmp {
    server {
        listen 1935;
        chunk_size 4096;

        application live {
            live on;
            record off;

            hls on;
            hls_path /tmp/hls;
            hls_fragment 3;
            hls_playlist_length 10;
        }
    }
}

http {
    server {
        listen 80;
        location /hls {
            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
            add_header Access-Control-Allow-Origin *;
        }
    }
}
```

---

## 📄 node/Dockerfile

```Dockerfile
FROM node:18

WORKDIR /app

COPY . .

RUN npm install

EXPOSE 4000

CMD ["node", "server.js"]
```

---

## 🚀 Usage

1. Create the folder structure above
2. Place your `server.js`, `package.json`, and `index.html` accordingly
3. Build and run the containers:

```bash
docker-compose up --build
```

---

## ✅ What Happens

- Your **Node.js app** runs on `http://localhost:4000`
- Incoming WebSocket streams are piped to `ffmpeg` → RTMP to `nginx`
- `nginx-rtmp` ingests RTMP and exposes HLS at `http://localhost:8080/hls/`
- You can access your player UI at: `http://localhost:4000` and generated `.m3u8` files at `http://localhost:8080/hls/...`

---

## ✅ Tips

- 🔐 Combine with token-based WebSocket auth (see Phase 1)
- 📦 Enable persistent storage for HLS segments with `volumes`
- 🎯 Use real stream keys like `stream_abcd123` for multi-streaming

---

## 📈 Monitoring & Metrics

To monitor streaming activity, add these features to your `server.js`:

### ✅ Track Active Streams
In memory:
```js
const activeStreams = new Map();
```

When a stream starts:
```js
activeStreams.set(streamKey, {
  startedAt: Date.now(),
  bytesReceived: 0,
  clientIP: ws._socket.remoteAddress
});
```

On message:
```js
activeStreams.get(streamKey).bytesReceived += msg.length;
```

On close:
```js
activeStreams.delete(streamKey);
```

### ✅ Add /metrics Endpoint

```js
app.get('/metrics', (req, res) => {
  const metrics = Array.from(activeStreams.entries()).map(([key, data]) => ({
    streamKey: key,
    uptime: ((Date.now() - data.startedAt) / 1000).toFixed(1) + 's',
    dataMB: (data.bytesReceived / (1024 * 1024)).toFixed(2) + ' MB',
    clientIP: data.clientIP
  }));
  res.json({ active: metrics });
});
```

Now visit `http://localhost:4000/metrics` to see active stream statistics.

---

✅ All 3 phases are now complete. You have:
- Authentication
- Dockerized deployment
- Streaming metrics for observability

